<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AssassinKillsPlayerPostscript" xml:space="preserve">
    <value>Sorry, but no one could take your contract.</value>
  </data>
  <data name="AssassinsGuild" xml:space="preserve">
    <value>Assassins' Guild</value>
  </data>
  <data name="AssassinsLoseGamePostscript" xml:space="preserve">
    <value>That's just an assassin's job.</value>
  </data>
  <data name="AssassinsWelcomeMessage" xml:space="preserve">
    <value>Oops... Someone signed a contract to kill you. If you wanna survive and go on to enjoy your life, you must pay. Accept to cooperate with us, enter a random fee and we try to find an assassin to kill your enemy. If you skip, so... Our member will have fulfilled a contract out on you.</value>
  </data>
  <data name="BeggarKillsPlayerPostscript" xml:space="preserve">
    <value>Unfortunately, beggars don't forgive deeds like this.</value>
  </data>
  <data name="BeggarsGuild" xml:space="preserve">
    <value>Beggars' Guild</value>
  </data>
  <data name="BeggarsWelcomeMessage" xml:space="preserve">
    <value>Please, donate some money.. Save your soul. Accept to donate a fix sum of money and make a good deed. Or if you skip us, you will chase you to death...</value>
  </data>
  <data name="FoolsGuild" xml:space="preserve">
    <value>Fools' Guild</value>
  </data>
  <data name="FoolsLoseGame" xml:space="preserve">
    <value>That's strange. You lost easy money. *These players, sometimes, are so illogical.</value>
  </data>
  <data name="FoolsPlayGamePrescript" xml:space="preserve">
    <value>Our congratulations! You earned some money.But remember, you have to pretend to be a fool, as your friend</value>
  </data>
  <data name="FoolsWelcomeMessage" xml:space="preserve">
    <value>Hi! I'm your friend in Ankh-Morpork! Accept to earn some money in this city. If you skip, you get nothing. </value>
  </data>
  <data name="PlayerIsLackOfBeerPostscript" xml:space="preserve">
    <value>Lack of beer is sometimes fatal.</value>
  </data>
  <data name="PlayerIsLackOfMoneyPostscript" xml:space="preserve">
    <value>Unfortunately, you didn't have enough money to donate.</value>
  </data>
  <data name="PlayerIsNotLackOfBeerPostscript" xml:space="preserve">
    <value>Thank you, my dear friend!</value>
  </data>
  <data name="PlayerWinsBeggar" xml:space="preserve">
    <value>You donated some money. Good deeds come back like a boomerang. Therefore, live on.</value>
  </data>
  <data name="ThiefKillsPlayerPostscript" xml:space="preserve">
    <value>That's a result of thieves' codex.</value>
  </data>
  <data name="ThievesGuild" xml:space="preserve">
    <value>Thieves' Guild</value>
  </data>
  <data name="ThievesLoseGamePostscript" xml:space="preserve">
    <value>Unfortunately, you didn't have enough money to pay off the Thieves' Guild.</value>
  </data>
  <data name="ThievesWelcomeMessage" xml:space="preserve">
    <value>Hey! How's it going? Do you have something in your pockets? Accept to pay off us and loose 10 AM$. If you don't wanna pay, you will be died. Such rules...</value>
  </data>
  <data name="UnknownName" xml:space="preserve">
    <value>Unknown</value>
  </data>
</root>